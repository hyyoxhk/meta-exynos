From b7291a3f5761755baee63d4d83ee4d824949051e Mon Sep 17 00:00:00 2001
From: He Yong <hyyoxhk@163.com>
Date: Thu, 18 May 2023 11:51:35 +0800
Subject: [PATCH] arm-v2023.04-board

---
 arch/arm/mach-exynos/Kconfig   |   4 +
 board/samsung/itop/Kconfig     |  12 ++
 board/samsung/itop/MAINTAINERS |   6 +
 board/samsung/itop/Makefile    |   6 +
 board/samsung/itop/itop.c      | 338 +++++++++++++++++++++++++++++++++
 board/samsung/itop/setup.h     | 274 ++++++++++++++++++++++++++
 include/configs/itop.h         | 155 +++++++++++++++
 7 files changed, 795 insertions(+)
 create mode 100644 board/samsung/itop/Kconfig
 create mode 100644 board/samsung/itop/MAINTAINERS
 create mode 100644 board/samsung/itop/Makefile
 create mode 100644 board/samsung/itop/itop.c
 create mode 100644 board/samsung/itop/setup.h
 create mode 100644 include/configs/itop.h

diff --git a/arch/arm/mach-exynos/Kconfig b/arch/arm/mach-exynos/Kconfig
index 8f3aee05..a079b43c 100644
--- a/arch/arm/mach-exynos/Kconfig
+++ b/arch/arm/mach-exynos/Kconfig
@@ -95,6 +95,9 @@ config TARGET_ODROID
 	bool "Exynos4412 Odroid board"
 	select MISC_COMMON
 
+config TARGET_ITOP
+	bool "Exynos4412 iTop-4412 board"
+
 endchoice
 endif
 
@@ -247,6 +250,7 @@ source "board/samsung/universal_c210/Kconfig"
 source "board/samsung/origen/Kconfig"
 source "board/samsung/trats2/Kconfig"
 source "board/samsung/odroid/Kconfig"
+source "board/samsung/itop/Kconfig"
 source "board/samsung/arndale/Kconfig"
 source "board/samsung/smdk5250/Kconfig"
 source "board/samsung/smdk5420/Kconfig"
diff --git a/board/samsung/itop/Kconfig b/board/samsung/itop/Kconfig
new file mode 100644
index 00000000..b58ad3fd
--- /dev/null
+++ b/board/samsung/itop/Kconfig
@@ -0,0 +1,12 @@
+if TARGET_ITOP
+
+config SYS_BOARD
+	default "itop"
+
+config SYS_VENDOR
+	default "samsung"
+
+config SYS_CONFIG_NAME
+	default "itop"
+
+endif
diff --git a/board/samsung/itop/MAINTAINERS b/board/samsung/itop/MAINTAINERS
new file mode 100644
index 00000000..02356b4f
--- /dev/null
+++ b/board/samsung/itop/MAINTAINERS
@@ -0,0 +1,6 @@
+ITOP BOARD
+M:	hyyoxhk@163.com
+S:	Maintained
+F:	board/samsung/itop/
+F:	include/configs/itop.h
+F:	configs/itop_defconfig
diff --git a/board/samsung/itop/Makefile b/board/samsung/itop/Makefile
new file mode 100644
index 00000000..509a7cd1
--- /dev/null
+++ b/board/samsung/itop/Makefile
@@ -0,0 +1,6 @@
+# SPDX-License-Identifier: GPL-2.0+
+#
+# Copyright (C) 2020 hey <hyyoxhk@163.com>
+#
+
+obj-y	:= itop.o
diff --git a/board/samsung/itop/itop.c b/board/samsung/itop/itop.c
new file mode 100644
index 00000000..ecacbb4d
--- /dev/null
+++ b/board/samsung/itop/itop.c
@@ -0,0 +1,338 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2020 hey <hyyoxhk@163.com>
+ *
+ * Configuation settings for the iTop-4412 (EXYNOS4412) board.
+ */
+
+#include <common.h>
+#include <linux/delay.h>
+#include <log.h>
+#include <asm/arch/pinmux.h>
+#include <asm/arch/power.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/gpio.h>
+#include <asm/gpio.h>
+#include <asm/arch/cpu.h>
+#include <dm.h>
+#include <env.h>
+#include <env_internal.h>
+#include <power/pmic.h>
+#include <power/regulator.h>
+#include <power/s5m8767.h>
+#include <errno.h>
+#include <mmc.h>
+#include <usb.h>
+#include <usb/dwc2_udc.h>
+#include "setup.h"
+
+DECLARE_GLOBAL_DATA_PTR;
+
+/* iTop-4412 board types */
+enum {
+	ITOP_TYPE_SCP,
+	ITOP_TYPE_POP,
+	ITOP_TYPE_REV,
+};
+
+#ifdef CONFIG_BOARD_TYPES
+/* HW revision with core board */
+static u32 board_rev = 1;
+
+u32 get_board_rev(void)
+{
+	return board_rev;
+}
+
+static u32 get_cpu_type(void)
+{
+	u32 pro_id = readl(EXYNOS4_PRO_ID);
+	u32 package = pro_id >> 8;
+
+	return package & 0xf;
+}
+
+void set_board_type(void)
+{
+	switch (get_cpu_type()) {
+	case 0x0:
+		gd->board_type = ITOP_TYPE_SCP;
+		break;
+	case 0x2:
+		gd->board_type = ITOP_TYPE_POP;
+		break;
+	default:
+		gd->board_type = ITOP_TYPE_REV;
+		break;
+	}
+}
+
+void set_board_revision(void)
+{
+	/*
+	 * Revision already set by set_board_type() because it can be
+	 * executed early.
+	 */
+}
+
+const char *get_board_type(void)
+{
+	const char *board_type[] = {"SCP", "POP"};
+
+	return board_type[gd->board_type];
+}
+#endif
+
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+static void setup_board_info(void)
+{
+	const char *fdt_compat;
+	int fdt_compat_len;
+	char info[64];
+
+	snprintf(info, ARRAY_SIZE(info), "%u.%u", (s5p_cpu_rev & 0xf0) >> 4, s5p_cpu_rev & 0xf);
+	env_set("soc_rev", info);
+
+	snprintf(info, ARRAY_SIZE(info), "%x", s5p_cpu_id);
+	env_set("soc_id", info);
+
+	snprintf(info, ARRAY_SIZE(info), "%x", get_board_rev());
+	env_set("board_rev", info);
+
+	fdt_compat = fdt_getprop(gd->fdt_blob, 0, "compatible", &fdt_compat_len);
+	if (fdt_compat && fdt_compat_len) {
+		env_set("board_name", fdt_compat + 7);
+
+		snprintf(info, ARRAY_SIZE(info), "%s%x-%s.dtb", CONFIG_SYS_SOC,
+			s5p_cpu_id, fdt_compat + 7);
+		env_set("fdtfile", info);
+	}
+}
+
+static void setup_boot_mode(void)
+{
+	u32 bootmode = get_boot_mode();
+
+	switch (bootmode) {
+	case BOOT_MODE_SD:
+		env_set("boot_device", "mmc");
+		env_set("boot_instance", "0");
+		env_set("mmcroot", "/dev/ram0");
+		env_set("LABEL", "install");
+		break;
+	case BOOT_MODE_EMMC_SD:
+		env_set("boot_device", "mmc");
+		env_set("boot_instance", "1");
+		env_set("mmcroot", "/dev/mmcblk1p2 rootwait rw");
+		env_set("LABEL", "boot");
+		break;
+	default:
+		pr_debug("unexpected boot mode = %x\n", bootmode);
+		break;
+	}
+}
+
+void set_board_info(void)
+{
+	setup_board_info();
+	setup_boot_mode();
+}
+#endif
+
+#ifdef CONFIG_SET_DFU_ALT_INFO
+char *get_dfu_alt_system(char *interface, char *devstr)
+{
+	return env_get("dfu_alt_system");
+}
+
+char *get_dfu_alt_boot(char *interface, char *devstr)
+{
+	struct mmc *mmc;
+	char *alt_boot;
+	int dev_num;
+
+	dev_num = simple_strtoul(devstr, NULL, 10);
+
+	mmc = find_mmc_device(dev_num);
+	if (!mmc)
+		return NULL;
+
+	if (mmc_init(mmc))
+		return NULL;
+
+	alt_boot = IS_SD(mmc) ? CFG_DFU_ALT_BOOT_SD :
+				CFG_DFU_ALT_BOOT_EMMC;
+
+	return alt_boot;
+}
+#endif
+
+static void board_clock_init(void)
+{
+	struct exynos4x12_clock *clk =
+			(struct exynos4x12_clock *)samsung_get_base_clock();
+
+	/* Set PDIV, MDIV, and SDIV values (Refer to (A, M, E, V)
+	 * Change other PLL control values
+	 */
+	writel(CLK_DIV_CPU0_VAL, &clk->div_cpu0);
+	writel(CLK_DIV_CPU1_VAL, &clk->div_cpu1);
+	writel(CLK_DIV_DMC0_VAL, &clk->div_dmc0);
+	writel(CLK_DIV_DMC1_VAL, &clk->div_dmc1);
+	writel(CLK_DIV_TOP_VAL, &clk->div_top);
+	writel(CLK_DIV_LEFTBUS_VAL, &clk->div_leftbus);
+	writel(CLK_DIV_RIGHTBUS_VAL, &clk->div_rightbus);
+	writel(CLK_DIV_PERIL0_VAL, &clk->div_peril0);
+	writel(CLK_DIV_FSYS0_VAL, &clk->div_fsys0);
+	writel(CLK_DIV_FSYS1_VAL, &clk->div_fsys1);
+	writel(CLK_DIV_FSYS2_VAL, &clk->div_fsys2);
+	writel(CLK_DIV_FSYS3_VAL, &clk->div_fsys3);
+
+	/* Set K, AFC, MRR, MFR values if necessary
+	 * (Refer to (A, M, E, V)PLL_CON1 SFRs)
+	 * Turn on a PLL (Refer to (A, M, E, V) PLL_CON0 SFRs)
+	 */
+	writel(APLL_CON1_VAL, &clk->apll_con1);
+	writel(APLL_CON0_VAL, &clk->apll_con0);
+	writel(MPLL_CON1_VAL, &clk->mpll_con1);
+	writel(MPLL_CON0_VAL, &clk->mpll_con0);
+	writel(EPLL_CON2_VAL, &clk->epll_con2);
+	writel(EPLL_CON0_VAL, &clk->epll_con0);
+	writel(VPLL_CON2_VAL, &clk->vpll_con2);
+	writel(VPLL_CON0_VAL, &clk->vpll_con0);
+
+	/* Wait until the PLL is locked */
+	writel(APLL_LOCKTIME, &clk->apll_lock);
+	writel(MPLL_LOCKTIME, &clk->mpll_lock);
+	writel(EPLL_LOCKTIME, &clk->epll_lock);
+	writel(VPLL_LOCKTIME, &clk->vpll_lock);
+
+	/* Select the PLL output clock instead of input reference clock,
+	 * after PLL output clock is stabilized.
+	 * (Refer to CLK_SRC_CPU SFR for APLL and MPLL,
+	 * CLK_SRC_TOP0 for EPLL and VPLL)
+	 * Once a PLL is turned on, do not turn it off.
+	 */
+	writel(CLK_SRC_CPU_VAL, &clk->src_cpu);
+	writel(CLK_SRC_DMC_VAL, &clk->src_dmc);
+	writel(CLK_SRC_TOP0_VAL, &clk->src_top0);
+	writel(CLK_SRC_TOP1_VAL, &clk->src_top1);
+	writel(CLK_SRC_LEFTBUS_VAL, &clk->src_leftbus);
+	writel(CLK_SRC_RIGHTBUS_VAL, &clk->src_rightbus);
+	writel(CLK_SRC_PERIL0_VAL, &clk->src_peril0);
+	writel(CLK_SRC_FSYS_VAL, &clk->src_fsys);
+}
+
+int exynos_early_init_f(void)
+{
+	board_clock_init();
+
+	return 0;
+}
+
+static void board_gpio_init(void)
+{
+	/* eMMC Reset Pin */
+	gpio_request(EXYNOS4X12_GPIO_K02, "eMMC Reset");
+	gpio_direction_output(EXYNOS4X12_GPIO_K02, 1);
+
+	/* LED */
+	gpio_request(EXYNOS4X12_GPIO_L20, "LED2");
+	gpio_direction_output(EXYNOS4X12_GPIO_L20, 1);
+
+#ifdef CONFIG_CMD_USB
+	/* USB3503A Reference Intn */
+	gpio_request(EXYNOS4X12_GPIO_M23, "USB3503A Intn");
+	gpio_direction_output(EXYNOS4X12_GPIO_M23, 0);
+
+	/* USB3503A Connect */
+	gpio_request(EXYNOS4X12_GPIO_M33, "USB3503A Connect");
+	gpio_direction_output(EXYNOS4X12_GPIO_M33, 0);
+
+	/* USB3503A Reset */
+	gpio_request(EXYNOS4X12_GPIO_M24, "USB3503A Reset");
+	gpio_direction_output(EXYNOS4X12_GPIO_M24, 0);
+
+	/* Reset */
+	gpio_direction_output(EXYNOS4X12_GPIO_M24, 1);
+
+	/* From usb3503 linux driver ? */
+	mdelay(4);
+
+	/* Connect */
+	gpio_direction_output(EXYNOS4X12_GPIO_M33, 1);
+#endif
+}
+
+int exynos_init(void)
+{
+	board_gpio_init();
+
+	return 0;
+}
+
+int exynos_power_init(void)
+{
+	int ret;
+	struct udevice *dev;
+
+	ret = pmic_get("s5m8767-pmic", &dev);
+	/* TODO(sjg@chromium.org): Use driver model to access clock */
+	if (!ret)
+		s5m8767_enable_32khz_cp(dev);
+
+	if (ret == -ENODEV)
+		return 0;
+
+	ret = regulators_enable_boot_on(false);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+char *env_fat_get_dev_part(void)
+{
+	static char *dev_part[] = {"0:auto", "1:auto"};
+	u32 bootmode = get_boot_mode();
+
+	if (bootmode == BOOT_MODE_SD) {
+		return dev_part[0];
+	}
+
+	return dev_part[1];
+}
+
+enum env_location env_get_location(enum env_operation op, int prio)
+{
+	u32 bootmode = get_boot_mode();
+
+	if (prio)
+		return ENVL_UNKNOWN;
+
+	switch (bootmode) {
+	case BOOT_MODE_SD:
+	case BOOT_MODE_EMMC_SD:
+		if (CONFIG_IS_ENABLED(ENV_IS_IN_MMC))
+			return ENVL_MMC;
+		else if (CONFIG_IS_ENABLED(ENV_IS_IN_FAT))
+			return ENVL_FAT;
+		else
+			return ENVL_NOWHERE;
+	default:
+		return ENVL_NOWHERE;
+	}
+}
+
+const char *env_fat_get_intf(void)
+{
+	u32 bootmode = get_boot_mode();
+
+	switch (bootmode) {
+	case BOOT_MODE_SD:
+	case BOOT_MODE_EMMC_SD:
+		return "mmc";
+	default:
+		return "";
+	}
+}
diff --git a/board/samsung/itop/setup.h b/board/samsung/itop/setup.h
new file mode 100644
index 00000000..dc4f3f74
--- /dev/null
+++ b/board/samsung/itop/setup.h
@@ -0,0 +1,274 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2020 hey <hyyoxhk@163.com>
+ *
+ */
+
+#ifndef _SETUP_H
+#define _SETUP_H
+
+/* CLK_DIV_CPU0 */
+#define CORE_RATIO		0x0
+#define COREM0_RATIO		0x3
+#define COREM1_RATIO		0x7
+#define PERIPH_RATIO		0x0
+#define ATB_RATIO		0x4
+#define PCLK_DBG_RATIO		0x1
+#define APLL_RATIO		0x1
+#define CORE2_RATIO		0x0
+#define CLK_DIV_CPU0_VAL	(CORE2_RATIO << 28 \
+				| (APLL_RATIO << 24) \
+				| (PCLK_DBG_RATIO << 20) \
+				| (ATB_RATIO << 16) \
+				| (PERIPH_RATIO << 12) \
+				| (COREM1_RATIO << 8) \
+				| (COREM0_RATIO << 4) \
+				| (CORE_RATIO << 0))
+
+/* CLK_DIV_CPU1 */
+#define COPY_RATIO		0x4
+#define HPM_RATIO		0x0
+#define CORES_RATIO		0x0
+#define CLK_DIV_CPU1_VAL	((CORES_RATIO << 8) \
+				| (HPM_RATIO << 4) \
+				| (COPY_RATIO << 0))
+
+/* CLK_DIV_DMC0 */
+#define DMCP_RATIO		0x1
+#define DMCD_RATIO		0x1
+#define DMC_RATIO		0x1
+#define DPHY_RATIO		0x1
+#define ACP_PCLK_RATIO		0x1
+#define ACP_RATIO		0x3
+#define CLK_DIV_DMC0_VAL	((DMCP_RATIO << 20) \
+				| (DMCD_RATIO << 16) \
+				| (DMC_RATIO << 12) \
+				| (DPHY_RATIO << 8) \
+				| (ACP_PCLK_RATIO << 4)	\
+				| (ACP_RATIO << 0))
+
+/* CLK_DIV_DMC1 */
+#define G2D_ACP_RATIO		0x3
+#define C2C_RATIO		0x1
+#define PWI_RATIO		0x0
+#define C2C_ACLK_RATIO		0x1
+#define DVSEM_RATIO		0x1
+#define DPM_RATIO		0x1
+#define CLK_DIV_DMC1_VAL	((DPM_RATIO << 24) \
+				| (DVSEM_RATIO << 16) \
+				| (C2C_ACLK_RATIO << 12) \
+				| (PWI_RATIO << 8) \
+				| (C2C_RATIO << 4) \
+				| (G2D_ACP_RATIO << 0))
+
+/* CLK_DIV_TOP */
+#define ACLK_200_RATIO		0x3
+#define ACLK_100_RATIO		0x7
+#define ACLK_160_RATIO		0x4
+#define ACLK_133_RATIO		0x5
+#define ONENAND_RATIO		0x0
+#define ACLK_266_GPS_RATIO	0x2
+#define	ACLK_400_MCUISP_RATIO	0x1
+#define CLK_DIV_TOP_VAL		((ACLK_400_MCUISP_RATIO << 24) \
+				| (ACLK_266_GPS_RATIO << 20) \
+				| (ONENAND_RATIO << 16)	\
+				| (ACLK_133_RATIO << 12)\
+				| (ACLK_160_RATIO << 8)	\
+				| (ACLK_100_RATIO << 4)	\
+				| (ACLK_200_RATIO << 0))
+
+/* CLK_DIV_LEFTBUS */
+#define GPL_RATIO		0x1
+#define GDL_RATIO		0x3
+#define CLK_DIV_LEFTBUS_VAL	((GPL_RATIO << 4) | (GDL_RATIO))
+
+/* CLK_DIV_RIGHTBUS */
+#define GPR_RATIO		0x1
+#define GDR_RATIO		0x3
+#define CLK_DIV_RIGHTBUS_VAL	((GPR_RATIO << 4) | (GDR_RATIO))
+
+/* CLK_DIV_PERIL0 */
+#define UART4_RATIO		0x7
+#define UART3_RATIO		0x7
+#define UART2_RATIO		0x7
+#define UART1_RATIO		0x7
+#define UART0_RATIO		0x7
+#define CLK_DIV_PERIL0_VAL	((UART4_RATIO << 16) \
+				| (UART3_RATIO << 12) \
+				| (UART2_RATIO << 8) \
+				| (UART1_RATIO << 4) \
+				| (UART0_RATIO << 0))
+
+/* CLK_DIV_FSYS0 */
+#define MIPIHSI_RATIO		0x3
+#define CLK_DIV_FSYS0_VAL	((MIPIHSI_RATIO <<20))
+
+/* CLK_DIV_FSYS1 */
+#define MMC1_PRE_RATIO		0x1
+#define MMC1_RATIO		0x7
+#define MMC0_PRE_RATIO		0x1
+#define MMC0_RATIO		0x7
+#define CLK_DIV_FSYS1_VAL	((MMC1_PRE_RATIO << 24) \
+				| (MMC1_RATIO << 16) \
+				| (MMC0_PRE_RATIO << 8) \
+				| (MMC0_RATIO << 0))
+
+/* CLK_DIV_FSYS2 */
+#define MMC3_PRE_RATIO		0x1
+#define MMC3_RATIO		0x7
+#define MMC2_PRE_RATIO		0x1
+#define MMC2_RATIO		0x7
+#define CLK_DIV_FSYS2_VAL	((MMC3_PRE_RATIO << 24) \
+				| (MMC3_RATIO << 16) \
+				| (MMC2_PRE_RATIO << 8) \
+				| (MMC2_RATIO << 0))
+
+/* CLK_DIV_FSYS3 */
+#define MMC4_PRE_RATIO		0x0
+#define MMC4_RATIO		0x7
+#define CLK_DIV_FSYS3_VAL	((MMC4_PRE_RATIO << 8) \
+				| (MMC4_RATIO << 0))
+
+/* A/M PLL_CON1 */
+#define AFC(x)                  ((x) & 0x1f)
+#define LOCK_CON_DLY(x)         (((x) & 0x1f) << 8)
+#define LOCK_CON_IN(x)          (((x) & 0x3) << 12)
+#define LOCK_CON_OUT(x)         (((x) & 0x3) << 14)
+#define FEED_EN(x)              (((x) & 0x1) << 16)
+#define AFC_ENB(x)              (((x) & 0x1) << 20)
+#define DCC_ENB(x)              (((x) & 0x1) << 21)
+#define BYPASS(x)               (((x) & 0x1) << 22)
+#define RESV0(x)                (((x) & 0x1) << 23)
+#define RESV1(x)                (((x) & 0x1) << 24)
+
+/* APLL_CON1 */
+#define APLL_CON1_VAL		(AFC(0) | LOCK_CON_DLY(8) | LOCK_CON_IN(3) \
+				| LOCK_CON_OUT(0) | FEED_EN(0) | AFC_ENB(0) \
+				| DCC_ENB(1) | BYPASS(0) | RESV0(0) | RESV1(0))
+
+/* MPLL_CON1 */
+#define MPLL_CON1_VAL		(AFC(0) | LOCK_CON_DLY(8) | LOCK_CON_IN(3) \
+				| LOCK_CON_OUT(0) | FEED_EN(0) | AFC_ENB(0) \
+				| DCC_ENB(1) | BYPASS(0) | RESV0(0) | RESV1(0))
+
+/* A/M/EV PLL_CON0 */
+#define SDIV(x)                 ((x) & 0x7)
+#define PDIV(x)                 (((x) & 0x3f) << 8)
+#define MDIV(x)                 (((x) & 0x3ff) << 16)
+#define FSEL(x)                 (((x) & 0x1) << 27)
+#define PLL_LOCKED_BIT          (0x1 << 29)
+#define PLL_ENABLE(x)           (((x) & 0x1) << 31)
+
+/* APLL_CON0 */
+#define APLL_CON0_VAL		(SDIV(0) | PDIV(3) | MDIV(125) | FSEL(0) | PLL_ENABLE(1))
+
+/* MPLL_CON0 */
+#define  MPLL_CON0_VAL		(SDIV(0) | PDIV(3) | MDIV(100) | FSEL(0) | PLL_ENABLE(1))
+
+/* EPLL_CON0 */
+#define EPLL_CON0_VAL		(SDIV(2) | PDIV(2) | MDIV(64) | FSEL(0) | PLL_ENABLE(1))
+
+/* VPLL_CON0 */
+#define VPLL_CON0_VAL		(SDIV(3) | PDIV(3) | MDIV(54) | FSEL(0) | PLL_ENABLE(1))
+
+/* E/V PLL_CON2 */
+#define ICP_BOOST(x)            ((x) & 0x3)
+#define EV_FSEL(x)              (((x) & 0x1) << 2)
+#define FVCO_EN(x)              (((x) & 0x1) << 3)
+#define EV_BYPASS(x)            (((x) & 0x1) << 4)
+#define SSCG_EN(x)              (((x) & 0x1) << 5)
+#define EV_AFC_ENB(x)           (((x) & 0x1) << 6)
+#define EV_DCC_ENB(x)              (((x) & 0x1) << 7)
+#define EXTAFC(x)               (((x) & 0x1f) << 8)
+
+/* EPLL_CON2 */
+#define EPLL_CON2_VAL		(ICP_BOOST(0) | EV_FSEL(1) | FVCO_EN(1) | EV_BYPASS(1) \
+				| SSCG_EN(0) | EV_AFC_ENB(0) | EV_DCC_ENB(1) | EXTAFC(0))
+
+/* VPLL_CON2 */
+#define VPLL_CON2_VAL		(ICP_BOOST(0) | EV_FSEL(1) | FVCO_EN(1) | EV_BYPASS(1) \
+				| SSCG_EN(0) | EV_AFC_ENB(0) | EV_DCC_ENB(1) | EXTAFC(0))
+
+/* A/M/E/V PLL_LOCK */
+#define PLL_LOCKTIME(x)         ((x) & 0xffff)
+
+#define APLL_LOCKTIME		PLL_LOCKTIME(PDIV(3) * 270)
+#define MPLL_LOCKTIME		PLL_LOCKTIME(PDIV(3) * 270)
+#define EPLL_LOCKTIME		PLL_LOCKTIME(PDIV(2) * 270)
+#define VPLL_LOCKTIME		PLL_LOCKTIME(PDIV(3) * 270)
+
+/* CLK_SRC_CPU */
+#define MUX_APLL_SEL		0x1
+#define MUX_CORE_SEL		0x0
+#define MUX_HPM_SEL		0x0
+#define MUX_MPLL_USER_SEL_C	0x1
+#define CLK_SRC_CPU_VAL		((MUX_MPLL_USER_SEL_C << 24) \
+				| (MUX_HPM_SEL << 20) \
+				| (MUX_CORE_SEL << 16) \
+				| (MUX_APLL_SEL << 0))
+
+/* CLK_SRC_DMC */
+#define MUX_C2C_SEL(x)		((x) & 0x1)
+#define MUX_DMC_BUS_SEL(x)	(((x) & 0x1) << 4)
+#define MUX_DPHY_SEL(x)		(((x) & 0x1) << 8)
+#define MUX_MPLL_SEL(x)		(((x) & 0x1) << 12)
+#define MUX_PWI_SEL(x)		(((x) & 0xf) << 16)
+#define MUX_G2D_ACP0_SEL(x)	(((x) & 0x1) << 20)
+#define MUX_G2D_ACP1_SEL(x)	(((x) & 0x1) << 24)
+#define MUX_G2D_ACP_SEL(x)	(((x) & 0x1) << 28)
+#define CLK_SRC_DMC_VAL		(MUX_C2C_SEL(0) | MUX_DMC_BUS_SEL(0) | MUX_DPHY_SEL(0) \
+				| MUX_MPLL_SEL(1) | MUX_PWI_SEL(0) | MUX_G2D_ACP0_SEL(0) \
+				| MUX_G2D_ACP1_SEL(0) | MUX_G2D_ACP_SEL(0))
+
+/* CLK_SRC_TOP0 */
+#define MUX_ONENAND_1_SEL(x)    ((x) & 0x1)
+#define MUX_EPLL_SEL(x)         (((x) & 0x1) << 4)
+#define MUX_VPLL_SEL(x)         (((x) & 0x1) << 8)
+#define MUX_ACLK_200_SEL(x)     (((x) & 0x1) << 12)
+#define MUX_ACLK_100_SEL(x)     (((x) & 0x1) << 16)
+#define MUX_ACLK_160_SEL(x)     (((x) & 0x1) << 20)
+#define MUX_ACLK_133_SEL(x)     (((x) & 0x1) << 24)
+#define MUX_ONENAND_SEL(x)      (((x) & 0x1) << 28)
+#define CLK_SRC_TOP0_VAL	(MUX_ONENAND_1_SEL(0) | MUX_EPLL_SEL(1) | MUX_VPLL_SEL(1) \
+				| MUX_ACLK_200_SEL(0) | MUX_ACLK_100_SEL(0) | MUX_ACLK_160_SEL(0) \
+				| MUX_ACLK_133_SEL(0) | MUX_ONENAND_SEL(1))
+
+/* CLK_SRC_TOP1 */
+#define MUX_ACLK_266_GPS_SEL(x)        (((x) & 0x1) << 4)
+#define MUX_ACLK_400_MCUISP_SEL(x)     (((x) & 0x1) << 8)
+#define MUX_MPLL_USER_SEL_T(x)         (((x) & 0x1) << 12)
+#define MUX_ACLK_266_GPS_SUB_SEL(x)    (((x) & 0x1) << 16)
+#define MUX_ACLK_200_SUB_SEL(x)        (((x) & 0x1) << 20)
+#define MUX_ACLK_400_MCUISP_SUB_SEL(x) (((x) & 0x1) << 24)
+#define CLK_SRC_TOP1_VAL		(MUX_ACLK_266_GPS_SEL(0) | MUX_ACLK_400_MCUISP_SEL(0) \
+					| MUX_MPLL_USER_SEL_T(1) | MUX_ACLK_266_GPS_SUB_SEL(1) \
+					| MUX_ACLK_200_SUB_SEL(1) | MUX_ACLK_400_MCUISP_SUB_SEL(1))
+
+/* CLK_SRC_LEFTBUS */
+#define	MUX_GDL_SEL(x)		((x) & 0x1)
+#define	MUX_MPLL_USER_SEL_L(x)	(((x) & 0x1) << 4)
+#define CLK_SRC_LEFTBUS_VAL	(MUX_GDL_SEL(0) | MUX_MPLL_USER_SEL_L(1))
+
+/* CLK_SRC_RIGHTBUS */
+#define MUX_GDR_SEL(x)		((x) & 0x1)
+#define MUX_MPLL_USER_SEL_R(x)	(((x) & 0x1) << 4)
+#define CLK_SRC_RIGHTBUS_VAL	(MUX_GDR_SEL(0) | MUX_MPLL_USER_SEL_R(1))
+
+/* CLK_SRC_PERIL0 */
+#define UART0_SEL(x)		((x) & 0xf)
+#define UART1_SEL(x)		(((x) & 0xf) << 4)
+#define UART2_SEL(x)		(((x) & 0xf) << 8)
+#define UART3_SEL(x)		(((x) & 0xf) << 12)
+#define UART4_SEL(x)		(((x) & 0xf) << 16)
+#define CLK_SRC_PERIL0_VAL	(UART0_SEL(6) | UART1_SEL(6) | UART2_SEL(6) \
+				| UART3_SEL(6) | UART4_SEL(6))
+
+/* CLK_SRC_FSYS */
+#define MMC1_SEL(x)		(((x) & 0xf) << 4)
+#define MMC2_SEL(x)		(((x) & 0xf) << 8)
+#define MMC3_SEL(x)		(((x) & 0xf) << 12)
+#define MMC4_SEL(x)		(((x) & 0xf) << 16)
+#define MIPIHSI_SEL(x)		(((x) & 0x1) << 24)
+#define CLK_SRC_FSYS_VAL	(MMC1_SEL(6) | MMC2_SEL(6) | MMC3_SEL(6) \
+				| MMC4_SEL(6) | MIPIHSI_SEL(0))
+#endif
diff --git a/include/configs/itop.h b/include/configs/itop.h
new file mode 100644
index 00000000..b2fca8ec
--- /dev/null
+++ b/include/configs/itop.h
@@ -0,0 +1,155 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2020 hey <hyyoxhk@163.com>
+ *
+ * Configuation settings for the iTop-4412 (EXYNOS4412) board.
+ */
+
+#ifndef __CONFIG_ITOP_H
+#define __CONFIG_ITOP_H
+
+#include <configs/exynos4-common.h>
+
+/*#define CONFIG_SYS_L2CACHE_OFF*/
+#ifndef CONFIG_SYS_L2CACHE_OFF
+#define CFG_SYS_PL310_BASE	0x10502000
+#endif
+
+#define CONFIG_MACH_TYPE	5115
+
+#define CFG_SYS_SDRAM_BASE	0x40000000
+#define SDRAM_BANK_SIZE		(256 << 20)	/* 256 MB */
+#define PHYS_SDRAM_1		CFG_SYS_SDRAM_BASE
+
+#include <linux/sizes.h>
+
+/*
+ * For booting Linux, use the first 512 MB of memory, since this is
+ * the maximum mapped by the Linux kernel during initialization.
+ */
+#define CFG_SYS_BOOTMAPSZ		SZ_512M
+
+#define CONFIG_BOOTCOMMAND		"run distro_bootcmd ; run autoboot"
+
+#define CONFIG_SYS_MONITOR_BASE	0x00000000
+
+/* Partitions name */
+#define PARTS_BOOT		"boot"
+#define PARTS_ROOT		"platform"
+
+#define CFG_DFU_ALT \
+	"uImage fat 0 1;" \
+	"zImage fat 0 1;" \
+	"exynos4412-itop-elite.dtb fat 0 1;" \
+	""PARTS_BOOT" part 0 1;" \
+	""PARTS_ROOT" part 0 2\0" \
+
+#define CFG_SET_DFU_ALT_BUF_LEN	(SZ_1K)
+
+#define CFG_DFU_ALT_BOOT_EMMC \
+	"u-boot raw 0x3e 0x800 mmcpart 1;" \
+	"bl1 raw 0x0 0x1e mmcpart 1;" \
+	"bl2 raw 0x1e 0x1d mmcpart 1;" \
+	"tzsw raw 0x83e 0x138 mmcpart 1\0"
+
+#define CFG_DFU_ALT_BOOT_SD \
+	"u-boot raw 0x3f 0x800;" \
+	"bl1 raw 0x1 0x1e;" \
+	"bl2 raw 0x1f 0x1d;" \
+	"tzsw raw 0x83f 0x138\0"
+
+#define BOOT_TARGET_DEVICES(func) \
+	func(MMC, mmc, 0) \
+	func(MMC, mmc, 1)
+
+#include <config_distro_bootcmd.h>
+
+/*
+ * Bootable media layout:
+ * dev:    SD   eMMC(part boot)
+ * BL1      1    0
+ * BL2     31   30
+ * UBOOT   63   62
+ * TZSW  2111 2110
+ * ENV   2560 2560(part user)
+ *
+ * MBR Primary partiions:
+ * Num Name   Size  Offset
+ * 1.  BOOT:  100MiB 2MiB
+ * 2.  ROOT:  -
+ */
+#define CFG_EXTRA_ENV_SETTINGS \
+	"loadbootscript=load mmc ${mmcbootdev}:${mmcbootpart} ${scriptaddr} " \
+		"boot.scr\0" \
+	"loadkernel=load mmc ${mmcbootdev}:${mmcbootpart} ${kernel_addr_r} " \
+		"${kernelname}\0" \
+	"loadinitrd=load mmc ${mmcbootdev}:${mmcbootpart} ${ramdisk_addr_r} " \
+		"${initrdname}\0" \
+	"loaddtb=load mmc ${mmcbootdev}:${mmcbootpart} ${fdt_addr_r} " \
+		"${fdtfile}\0" \
+	"check_ramdisk=" \
+		"if run loadinitrd; then " \
+			"setenv initrd_addr ${ramdisk_addr_r};" \
+		"else " \
+			"setenv initrd_addr -;" \
+		"fi;\0" \
+	"check_dtb=" \
+		"if run loaddtb; then " \
+			"setenv fdt_addr ${fdt_addr_r};" \
+		"else " \
+			"setenv fdt_addr;" \
+		"fi;\0" \
+	"kernel_args=" \
+		"setenv bootargs root=/dev/mmcblk${mmcrootdev}p${mmcrootpart}" \
+		" rootwait ${console} ${opts}\0" \
+	"boot_script=" \
+		"run loadbootscript;" \
+		"source ${scriptaddr}\0" \
+	"boot_fit=" \
+		"setenv kernelname Image.itb;" \
+		"run loadkernel;" \
+		"run kernel_args;" \
+		"bootm ${kernel_addr_r}#${board_name}\0" \
+	"boot_uimg=" \
+		"setenv kernelname uImage;" \
+		"run check_dtb;" \
+		"run check_ramdisk;" \
+		"run loadkernel;" \
+		"run kernel_args;" \
+		"bootm ${kernel_addr_r} ${initrd_addr} ${fdt_addr};\0" \
+	"boot_zimg=" \
+		"setenv kernelname zImage;" \
+		"run check_dtb;" \
+		"run check_ramdisk;" \
+		"run loadkernel;" \
+		"run kernel_args;" \
+		"bootz ${kernel_addr_r} ${initrd_addr} ${fdt_addr};\0" \
+	"autoboot=" \
+		"if test -e mmc ${mmcbootdev} boot.scr; then; " \
+			"run boot_script; " \
+		"elif test -e mmc ${mmcbootdev} Image.itb; then; " \
+			"run boot_fit;" \
+		"elif test -e mmc ${mmcbootdev} zImage; then; " \
+			"run boot_zimg;" \
+		"elif test -e mmc ${mmcbootdev} uImage; then; " \
+			"run boot_uimg;" \
+		"fi;\0" \
+	"console=console=ttySAC1,115200n8\0" \
+	"mmcbootdev=0\0" \
+	"mmcbootpart=1\0" \
+	"mmcrootdev=0\0" \
+	"mmcrootpart=2\0" \
+	"dfu_alt_system="CFG_DFU_ALT \
+	"dfu_alt_info=Please reset the board\0" \
+	"consoleon=set console console=ttySAC1,115200n8; save; reset\0" \
+	"consoleoff=set console console=ram; save; reset\0" \
+	"initrdname=uInitrd\0" \
+	"ramdisk_addr_r=0x44400000\0" \
+	"fdtoverlay_addr_r=0x44300000\0" \
+	"pxefile_addr_r=0x44200000\0" \
+	"scriptaddr=0x44100000\0" \
+	"fdt_addr_r=0x44000000\0" \
+	"kernel_addr_r=0x42000000\0" \
+	BOOTENV
+
+#endif	/* __CONFIG_H */
-- 
2.34.1

